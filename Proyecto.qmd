---
title: "Untitled"
format: pdf
editor: visual
---

**Carga de BBDD**

```{r}
#Colocar ruta del dataframe
df <- read.csv("/home/pallavi/git/course/statistics/final_project/data/log2.csv")
```

```{r , results='hide', warning=FALSE, message=FALSE}


library(tidyverse)
library(caret)
library(ggplot2)
library(e1071)
library(DataExplorer)
library(caTools)
library(MASS)
library(dplyr)
library(pROC)
library(dplyr)
library(rsample)
library(corrplot)
```

# **Análisis Exploratorio de datos**

```{r}
set.seed(163)
```

```{r}
plot_histogram(df)
```

```{r}
png("matriz_correlacion.png", width = 15, height = 15, units = "in", res = 300)
corrplot(cor(df1), method = "color",
addCoef.col = "white")
dev.off()

```

```{r}
plot_intro(df)
```

```{r}
plot_bar(df)
```

```{r}
plot_prcomp(df)
```

# **Descarte y transformación de Variables**

```{r}

df$Action <- ifelse(df$Action == "allow", 1, 0)
df$Action <- as.factor(df$Action)

```

```{r}
boxplot_stats <- boxplot(df)
```

```{r}
#¿ Remover outliers
attach(df)

for (i in 12)
  {
  outliers <- boxplot.stats(df[[i]])$out
  df[[i]][df[[i]] %in% outliers] <- NA
}
df <- filter_if(df, is.numeric , all_vars(!is.na(.)))
```

```{r}
df$Bytes.Sent <- (df$Bytes.Sent)^{1/4}
df$pkts_sent <- (df$pkts_sent)^{1/4}
```

```{r}
df <- df[, -which(names(df) == "Bytes")]
df <- df[, -which(names(df) == "Packets")]

```

```{r}
df_numericas <- df[, sapply(df, is.numeric)]

df_notnumerica <-df[, sapply(df, is.factor)]


```

```{r}
pca <- prcomp(df_numericas, scale. = TRUE)
X_pca <- predict(pca)
df_pca <- data.frame(X_pca, df_notnumerica)
```

```{r}
summary (pca)
plot(pca)
```

```{r}
weights <- pca$rotation
print(weights)
```

# **Regresion BASE**

```{r}
df_componentes <- data.frame(X_pca, df_notnumerica)
```

```{r}
split = sample.split(df_componentes$df_notnumerica,SplitRatio = 0.8)

train <- df_componentes[split==TRUE,]

train_purchased <- df_componentes[split==TRUE,"df_notnumerica"]

test <- df_componentes[split==FALSE,]

test_purchased <- df_componentes[split==FALSE,"df_notnumerica"]

```

```{r}
# Ajustar un modelo de regresión logística con componentes principales
fit2 <- glm(df_notnumerica ~ PC2+PC3+PC4+PC6+PC7+PC8+PC9, data = data.frame(train), family = binomial)
summary (fit2)
```

```{r}



predicciones_rl <- predict(fit2, newdata = test,type = "response")

y_pred = rep(0, length(predicciones_rl))

y_pred[predicciones_rl > 0.5] = 1

y_pred <- as.factor(y_pred)

confusionMatrix(y_pred, test$df_notnumerica , positive = "1")
```

## **`LDA`**

```{r}
lda.fit <- lda(df_notnumerica ~., data = train)
lda.fit
```

```{r}
lda.pred=predict(lda.fit, test)

confusionMatrix(table(lda.pred$class,test$df_notnumerica))
```

```{r}
qda.fit <- qda(df_notnumerica ~ ., data = train)

qda.fit

```

```{r}
prediccion_qda <- predict(qda.fit, newdata = test)

confusionMatrix(table(test$df_notnumerica,prediccion_qda$class, dnn = c ("clase real","clase predicha")))
```

```{r}
split = sample.split(df$Action,SplitRatio = 0.8)

trainnormal <- df[split==TRUE,]

train_purchased <- df[split==TRUE,"Action"]

testnormal <- df[split==FALSE,]

test_purchased <- df[split==FALSE,"Action"]
```

```{r}
library(class)
```

```{r}


train_knn = trainnormal %>% dplyr::select(-c("Action"))
test_knn = testnormal %>% dplyr::select(-c("Action"))



overall.accuracy = c()

for (i in 1:20){
set.seed(163)
knn_pred=knn(train_knn,test_knn,trainnormal$Action,k=i)
values = confusionMatrix(table(knn_pred,testnormal$Action))
overall = values$overall
overall.accuracy = append(overall.accuracy , overall["Accuracy"])
}

acc = data.frame(k=1:20, accuracy = overall.accuracy)
ggplot(acc) + aes(x = k, y = accuracy) +geom_line(size = 0.5, colour = "#112446") + theme_light()
```

```{r}
knn_pred=knn(train_knn,test_knn,trainnormal$Action,k=6,prob=TRUE)
confusionMatrix(table(knn_pred,testnormal$Action))
```

```{r}
library(rpart)
tree_fit = rpart(Action~. , data=trainnormal)
summary(tree_fit)

```

```{r}
library(rpart)
library(rpart.plot)
rpart.plot(tree_fit, box.col = "lightblue", branch.lty = 3, shadow.col = "gray", main = "Árbol de Decisión", fallen.leaves = TRUE, cex = 0.8)

```

```{r}
tree_pred=predict(tree_fit, testnormal , type ="class")
confusionMatrix(table(tree_pred,testnormal$Action))
tree_pred<-predict(tree_fit,testnormal,type="prob")
roc_obj4 <- roc(testnormal$Action,tree_pred[,2])
plot(roc_obj4)
auc(roc_obj4)
```
